-- out, back is link to first worker
-- graphics is output to framebuf
-- machines is total number of workers

-- upstream commands:
--    c.render
-- downstream command:
--    c.patch
--    c.message
--    c.done

PROC controlSystem ( CHAN OF ANY out, back, graphics, VAL INT machines )


  VAL c.stop        IS 0 :
  VAL c.render      IS 1 :  -- x0; y0
  VAL c.object      IS 2 :  -- size; [ size ]
  VAL c.light       IS 3 :  -- size; [ size ]
  VAL c.patch       IS 4 :  -- worker; x; y; patchSize; [ patchSize][patchSize]
  VAL c.runData     IS 5 :  -- ambient light, rendering mode, screen pos etc.
  VAL c.message     IS 6 :  -- size; [ words ]
  VAL c.done        IS 7 :  -- worker

  PROC sendPatches ( CHAN OF ANY out, VAL INT patchEdge)
    VAL patchesWide IS 256 / patchEdge :
    SEQ
      SEQ x = 0 FOR patchesWide
        SEQ y = 0 FOR patchesWide
          out ! c.render; (x * patchEdge) + 128; (y * patchEdge) + 128
      out ! c.stop
  :

  PROC loadBalance ( CHAN OF ANY in, out, return, graphics,
                     VAL INT machines)
    BOOL passActive, farmActive :
    INT free, command :
    SEQ
      farmActive := TRUE
      passActive := TRUE
      free := machines * 2
      WHILE passActive OR farmActive
        PRI ALT
          (free > 0) & in ? command
            IF
              command = c.render
                INT x, y :
                SEQ
                  in  ? x; y
                  out ! command; x; y
                  free := free - 1
              command = c.stop
                SEQ
                  out ! c.stop
                  passActive := FALSE
          return ? command
            IF
              command = c.patch
                INT worker, x, y, size :
                SEQ
                  return   ? worker; x; y; size
                  graphics ! command; worker; x; y; size
                  free := free + 1
              command = c.done
                INT worker :
                SEQ
                  return   ? worker
                  graphics ! command; worker
              command = c.stop
                SEQ
                  farmActive := FALSE
      graphics ! c.stop
  :

  -- send messages downstream (towards 1st worker)
  PROC outputBuffer ( CHAN OF ANY in, out )
    INT command :
    SEQ
      in ? command
      WHILE command <> c.stop
        SEQ
          IF
            command = c.render
              INT x, y :
              SEQ
                in  ? x; y
                out ! command; x; y
          in ? command
      out ! command
  :

  -- send messages upstream (from 1st worker, to framebuf)
  PROC returnBuffer ( CHAN OF ANY in, out )
    INT command :
    SEQ
      in ? command
      WHILE command <> c.stop
        SEQ
          IF
            command = c.patch
              INT x, y, size, worker :
              SEQ
                in  ? worker; x; y; size
                out ! command; worker; x; y; size
            command = c.done
              INT worker :
              SEQ
                in ? worker
                out ! command; worker
          in ? command
      out ! command
  :

  VAL patchEdge IS 8 :
  CHAN OF ANY a, b, c :
  WHILE TRUE
    SEQ
      PAR
        sendPatches  ( a, patchEdge)
        outputBuffer ( b, out  )
        returnBuffer ( back, c )
        loadBalance  ( a, b, c, graphics, machines )
:

