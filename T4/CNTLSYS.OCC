PROC controlSystem ( CHAN OF ANY out, back, graphics, VAL INT machines )


  VAL c.stop        IS 0 :
  VAL c.render      IS 1 :  -- render; x0; y0
  VAL c.object      IS 2 :  -- object; size; [ size ]
  VAL c.light       IS 3 :  -- light;  size; [ size ]
  VAL c.patch       IS 4 :  -- patch;  x; y; patchSize; [ patchSize][patchSize]
  VAL c.runData     IS 5 :  -- ambient light, rendering mode, screen pos etc.
  VAL c.message     IS 6 :  -- message; size; [ words ]
  VAL c.texture     IS 7 :  -- texture; size; [ texture ]
  VAL c.moretexture IS 8 :  -- moretexture; size; [ texture ]

  PROC writes ( VAL [] BYTE s, [256] INT buffer )
    SEQ
      SEQ i = 0 FOR SIZE s
        buffer [i] := INT s [i]
      graphics ! c.message; SIZE s; [ buffer FROM 0 FOR SIZE s ]
  :

  PROC sendPatches ( CHAN OF ANY out, VAL INT patchEdge, [256] INT buffer )
    VAL patchesWide IS 256 / patchEdge :
    SEQ
      SEQ x = 0 FOR patchesWide
        SEQ y = 0 FOR patchesWide
          out ! c.render; (x * patchEdge) + 128; (y * patchEdge) + 128
      out ! c.stop
  :

  PROC loadBalance ( CHAN OF ANY in, out, return, graphics,
                     VAL INT machines,
                     [256] INT buffer )
    BOOL passActive, farmActive :
    INT free, command :
    SEQ
      farmActive := TRUE
      passActive := TRUE
      free := machines * 2
      WHILE passActive OR farmActive
        PRI ALT
          (free > 0) & in ? command
            IF
              command = c.render
                INT x, y :
                SEQ
                  writes ( "CNTLSYS S c.render to system", buffer)
                  in  ? x; y
                  out ! command; x; y
                  free := free - 1
              command = c.stop
                SEQ
                  writes ( "CNTLSYS R c.stop from pumper", buffer)
                  out ! c.stop
                  passActive := FALSE
          return ? command
            IF
              command = c.patch
                INT x, y, size :
                SEQ
                  writes ( "CNTLSYS R patch", buffer)
                  return   ? x; y; size
                  writes ( "CNTLSYS R patch got x,y,size", buffer)
                  graphics ! command; x; y; size
                  writes ( "CNTLSYS R patch sent x,y,size", buffer)
                  free := free + 1
              command = c.message
                INT size :
                SEQ
                  return   ? size; [ buffer FROM 0 FOR size ]
                  graphics ! command; size; [ buffer FROM 0 FOR size ]
              command = c.stop
                SEQ
                  farmActive := FALSE
                  writes ( "CNTLSYS received c.stop", buffer)
      graphics ! c.stop
  :

  PROC outputBuffer ( CHAN OF ANY in, out )
    INT command :
    SEQ
      in ? command
      WHILE command <> c.stop
        SEQ
          IF
            command = c.render
              INT x, y :
              SEQ
                in  ? x; y
                out ! command; x; y
          in ? command
      out ! command
  :

  PROC returnBuffer ( CHAN OF ANY in, out, [256] INT buffer )
    INT command :
    SEQ
      in ? command
      WHILE command <> c.stop
        SEQ
          IF
            command = c.patch
              INT x, y, size :
              SEQ
                in  ? x; y; size
                out ! command; x; y; size
            command = c.message
              INT size :
              SEQ
                in ? size; [ buffer FROM 0 FOR size ]
                out ! command; size; [ buffer FROM 0 FOR size ]
          in ? command
      out ! command
  :

  VAL patchEdge IS 8 :
  [4][256] INT buffer :
  CHAN OF ANY a, b, c :
  WHILE TRUE
    SEQ
      PAR
        sendPatches  ( a, patchEdge, buffer[3])
        outputBuffer ( b, out  )
        returnBuffer ( back, c, buffer [1] )
        loadBalance  ( a, b, c, graphics, machines, buffer [2] )
:

