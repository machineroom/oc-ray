-- out, back is link to first worker
-- graphics is output to framebuf
-- machines is total number of workers

-- upstream commands:
--    c.render
--    c.stop
-- downstream command:
--    c.patch
--    c.done
--    c.stop

-- out is to workers
-- back is from workers
-- graphics is to renderer
PROC controlSystem ( CHAN OF ANY out, back, graphics, VAL INT machines )


  VAL c.stop        IS 0 :
  VAL c.render      IS 1 :  -- x0; y0
  VAL c.patch       IS 4 :  -- worker; x; y; patchSize; [ patchSize][patchSize]
  VAL c.done        IS 7 :  -- worker
  VAL c.tick        IS 8 :  -- worker;debug;


  -- flood out channel with the patch render commands for each 8*8 block (patchEdge=8)
  PROC sendPatches ( CHAN OF ANY out, VAL INT patchEdge)
    VAL patchesWide IS 256 / patchEdge :
    SEQ
      SEQ x = 0 FOR patchesWide
        SEQ y = 0 FOR patchesWide
          SEQ
            out ! c.render; (x * patchEdge) + 128; (y * patchEdge) + 128
      out ! c.stop
  :

  -- feed work into the pipeline so long as there are free workers
  -- original code had machines*2 since each worker could either be rendering, or buffer one lot of parameters
  -- c.stop traverses the pipeline and is reflected back so when it comes back here we know the pipeline has stopped

  -- in receives patch commands from sendPatches()
  -- out is to workers - via outputBuffer()
  -- return from workers - via returnBuffer()
  -- graphics is to renderer
  PROC loadBalance ( CHAN OF ANY in, out, return, graphics,
                     VAL INT machines)
    BOOL passActive, farmActive :
    INT free, command :
    SEQ
      farmActive := TRUE
      passActive := TRUE
      free := machines 
      WHILE passActive OR farmActive
        SEQ
          PRI ALT
            (free > 0) & in ? command
              SEQ
                IF
                  command = c.render
                    INT x, y :
                    SEQ
                      in  ? x; y
                      out ! command; x; y
                      free := free - 1
                      graphics ! c.tick; 254; free
                  command = c.stop
                    SEQ
                      out ! c.stop
                      passActive := FALSE
            return ? command
              SEQ
                IF
                  command = c.patch
                    INT worker, x, y, size :
                    SEQ
                      return   ? worker; x; y; size
                      graphics ! command; worker; x; y; size
                      free := free + 1
                      graphics ! c.tick; 255; free
                  command = c.done
                    INT worker :
                    SEQ
                      return   ? worker
                      graphics ! command; worker
                  command = c.tick
                    INT p1,p2 :
                    SEQ
                      return   ? p1;p2
                      graphics ! command; p1;p2
                  command = c.stop
                    SEQ
                      farmActive := FALSE
      graphics ! c.stop
  :

  VAL patchEdge IS 8 :
  CHAN OF ANY a :
  WHILE TRUE
    PAR
      sendPatches  ( a, patchEdge)
      loadBalance  ( a, out, back, graphics, machines )
:

