#INCLUDE "hostio.inc"
#INCLUDE "streamio.inc"

#USE "hostio.lib"
#USE "streamio.lib"

PROC frameBuffer (CHAN OF SP fs, ts, CHAN OF ANY in, VAL INT processors)

  ---------------------------- COMMANDS PROTOCOL -----------------------------
  
  VAL c.stop    IS 0 :
  VAL c.render  IS 1 :  -- render; x0; y0
  VAL c.object  IS 2 :  -- object; size; [ size ]
  VAL c.light   IS 3 :  -- light;  size; [ size ]
  VAL c.patch   IS 4 :  -- patch;  x; y; patchSize; [ patchSize][patchSize]
  VAL c.runData IS 5 :  -- ambient light, rendering mode, screen pos etc.
  VAL c.message IS 6 :  -- message; size; [ words ]


  VAL patchSize IS 16 :

  ---------------------------- COMMANDS PROTOCOL -----------------------------

  VAL ticksPerSecond IS 625000 / 64 :  -- lo priority

  CHAN OF ANY fromRenderer :
  PRI PAR
    WHILE TRUE
      INT command :
      SEQ
        in ? command
        IF
          command = c.patch
            INT x, y, size :
            [16][16] INT patch :
            SEQ
              in ? x; y; size
              fromRenderer ! command; x; y; size
          command = c.message
            INT size :
            [256] INT chars :
            SEQ
              in ? size; [ chars FROM 0 FOR size ]
              fromRenderer ! command; size; [ chars FROM 0 FOR size ]
          command = c.stop
            fromRenderer ! command
    SEQ
      ---------------------------- DO THE ACTION ---------------------------

      INT command :
      SEQ
        so.write.string.nl (fs, ts, " The inmos ray tracer is GO")
        fromRenderer ? command
        WHILE command <> c.stop
          SEQ
            IF
              command = c.patch
                INT x, y, size :
                [16][16] INT patch :
                SEQ
                  fromRenderer ? x; y; size
                  so.write.string (fs, ts, "FB patch x=")
                  so.write.int (fs, ts, x, 1)
                  so.write.string (fs, ts, ",y=")
                  so.write.int (fs, ts, y, 1)
                  so.write.string (fs, ts, ",size=")
                  so.write.int (fs, ts, size, 1)
                  so.write.string.nl (fs, ts, "")
              command = c.message
                INT size :
                [256] INT chars :
                [256] BYTE OutString : 
                SEQ
                  fromRenderer ? size; [ chars FROM 0 FOR size ]
                  SEQ i = 0 FOR size   
                    OutString[i] := BYTE (chars[i] /\ #FF)
                  so.write.string.nl (fs, ts, [OutString FROM 0 FOR size])
              TRUE
                SEQ
                  so.write.string.nl (fs, ts,"FB GARBAGE COMMAND")
                  STOP
            fromRenderer ? command
        SEQ
          so.write.string (fs, ts, " DONE!!!! ")
          so.write.nl (fs, ts)

      INT32 Status :
      SEQ
        so.exit (fs, ts, Status)      
:

