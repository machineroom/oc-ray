#INCLUDE "hostio.inc"
#INCLUDE "streamio.inc"

PROC frameBuffer (CHAN OF SP fs, ts, CHAN OF ANY in, CHAN OF INT image, 
                  VAL INT processors)
  #USE "hostio.lib"
  #USE "streamio.lib"
  #USE "SNGLMATH.LIB"
     
  ---------------------------- GLOBALS ----------------------------------------
  [512][512] BYTE screenRAM :  -- buffered 512 x 512 x 8-bit pixels


  -- See Inmos TN66. Occam addresses are not Hardware addresses. Oh no, that would be 
  -- way too simple, wouldn't it. Oh no, we're Inmos and we know better. #FFS
  PORT OF INT32 boardRegBase :
  VAL boardRegBaseHardware IS #200000 :
  PLACE boardRegBase AT ((boardRegBaseHardware >> 2) - (#80000000 >> 2)) /\ #3FFFFFFF :

  PROC resetB438()
    SEQ
      boardRegBase ! 0(INT32)
      boardRegBase ! #1(INT32)
      boardRegBase ! 0(INT32)
  :

  [4096]PORT OF INT32 regs :
  VAL regsHardware IS 0 :
  PLACE regs AT ((regsHardware >> 2) - (#80000000 >> 2)) /\ #3FFFFFFF :
  PROC IMS.332.WriteRegister(VAL INT regno, VAL INT32 val)
    SEQ
      regs[regno] ! val
  :

  VAL INT32 mon.frequency IS 25(INT32) :
  VAL INT32 mon.lineTime IS 202(INT32) :
  VAL INT32 mon.halfSync IS 8(INT32) :
  VAL INT32 mon.backPorch IS 20(INT32) :
  VAL INT32 mon.display IS 160(INT32) :
  VAL INT32 mon.shortDisplay IS 61(INT32) :
  VAL INT32 mon.vDisplay IS 960(INT32) :
  VAL INT32 mon.vBlank IS 80(INT32) :
  VAL INT32 mon.vSync IS 4(INT32) :
  VAL INT32 mon.vPreEqualize IS 4(INT32) :
  VAL INT32 mon.vPostEqualize IS 4(INT32) :
  VAL INT32 mon.broadPulse IS 75(INT32) :
  VAL INT32 mon.memInit IS 128(INT32) :
  VAL INT32 mon.xferDelay IS 1(INT32) :
  VAL INT32 mon.lineStart IS 0(INT32) :
  
  VAL IMS.332.REGBOOT	IS #000 :
  VAL	IMS.332.REGHALFSYNCH IS #021 :
  VAL	IMS.332.REGBACKPORCH IS #022 :
  VAL	IMS.332.REGDISPLAY IS #023 :
  VAL	IMS.332.REGSHORTDIS IS	#024 :
  VAL	IMS.332.REGBROADPULSE IS	#025 :
  VAL	IMS.332.REGVSYNC	IS #026 :
  VAL	IMS.332.REGVPREEQUALIZE	IS #027 :
  VAL	IMS.332.REGVPOSTEQUALIZE IS #028 :
  VAL	IMS.332.REGVBLANK IS #029 :
  VAL	IMS.332.REGVDISPLAY IS	#02A :
  VAL	IMS.332.REGLINETIME IS #02B :
  VAL	IMS.332.REGLINESTART	IS #02C :
  VAL	IMS.332.REGMEMINIT	IS #02D :
  VAL	IMS.332.REGXFERDELAY	IS #02E :
  VAL IMS.332.REGCOLORMASK IS #040 :
  VAL IMS.332.REGCSRA	IS #060 :
  VAL IMS.332.REGCSRB	IS #070 :
  VAL IMS.332.REGLUTBASE IS #100 : --color palette
  VAL IMS.332.REGLUTEND IS #1FF :

  VAL INT32 IMS.332.CSRA.VTGENABLE		IS #000001(INT32) :	-- vertical timing generator
  VAL INT32 IMS.332.CSRA.INTERLACED		IS #000002(INT32) :	-- screen format
  VAL INT32 IMS.332.CSRA.CCIR		IS #000004(INT32) :	--default is EIA
  VAL INT32 IMS.332.CSRA.SLAVESYNC		IS #000008(INT32) :	-- else from our pll
  VAL INT32 IMS.332.CSRA.PLAINSYNC		IS #000010(INT32) :	-- else tesselated
  VAL INT32 IMS.332.CSRA.SEPARATESYNC	IS #000020(INT32) :	-- else composite
  VAL INT32 IMS.332.CSRA.VIDEOONLY		IS #000040(INT32) :	-- else video+sync
  VAL INT32 IMS.332.CSRA.BLANKPEDESTAL	IS #000080(INT32) :	-- blank level
  VAL INT32 IMS.332.CSRA.CBLANKISOUT	IS #000100(INT32) :
  VAL INT32 IMS.332.CSRA.CBLANKNODELAY	IS #000200(INT32) :
  VAL INT32 IMS.332.CSRA.FORCEBLANK	IS #000400(INT32) :
  VAL INT32 IMS.332.CSRA.BLANKDISABLE	IS #000800(INT32) :
  VAL INT32 IMS.332.CSRA.VRAMINCREMENT	IS #003000(INT32) :
  VAL INT32 IMS.332.VRAMINC1	IS #000000(INT32) :
  VAL INT32 IMS.332.VRAMINC256	IS #001000(INT32) :	-- except interlaced->2
  VAL INT32 IMS.332.VRAMINC512	IS #002000(INT32) :
  VAL INT32 IMS.332.VRAMINC1024	IS #003000(INT32) :
  VAL INT32 IMS.332.CSRA.DMADISABLE	IS #004000(INT32) :
  VAL INT32 IMS.332.CSRA.SYNCDELAYMASK	IS #038000(INT32) :	-- 0-7 VTG clk delays
  VAL INT32 IMS.332.CSRA.PIXELINTERLEAVE	IS #040000(INT32) : -- bit 18
  VAL INT32 IMS.332.CSRA.DELAYEDSAMPLING	IS #080000(INT32) :
  VAL INT32 IMS.332.CSRA.BITSPERPIXEL	IS #700000(INT32) :
  VAL INT32 IMS.332.CSRA.DISABLECURSOR	IS #800000(INT32) :

  VAL INT32 IMS.335.BPP24		IS #600000(INT32) : -- bits 22,21

  VAL	INT32 IMS.332.BOOTPLL IS #00001F(INT32) :	-- xPLL, binary
  VAL	INT32 IMS.332.BOOTCLOCKPLL IS #000020(INT32) :	-- else xternal
  VAL	INT32 IMS.332.BOOT64BITMODE IS #000040(INT32) :	-- else 32

  PROC IMS.332.Init()
    -- PLL multipler in bits 0..4 (values from 5 to 31 allowed)
    -- B438 TRAM derives clock from TRAM clock (5MHz)
    -- SU are *2 for 24bpp mode
    INT32 clock :
    INT32 pllMultiplier :
    INT32 CSRA :
    SEQ
      clock := 5(INT32) --5MHz from TRAM
      pllMultiplier := mon.frequency/clock 
      pllMultiplier := pllMultiplier * 2(INT32) -- 24bpp interleaved mode -> clock=2*dot rate
      IMS.332.WriteRegister (IMS.332.REGBOOT, pllMultiplier BITOR IMS.332.BOOTCLOCKPLL)
      IMS.332.WriteRegister (IMS.332.REGCSRA, 0(INT32))
      IMS.332.WriteRegister (IMS.332.REGCSRB, #B(INT32)) -- 1011 Split SAM, Sync on green, External pixel sampling
      IMS.332.WriteRegister (IMS.332.REGLINETIME,	    mon.lineTime*2(INT32))
      IMS.332.WriteRegister (IMS.332.REGHALFSYNCH,     mon.halfSync*2(INT32))
      IMS.332.WriteRegister (IMS.332.REGBACKPORCH,     mon.backPorch*2(INT32))
      IMS.332.WriteRegister (IMS.332.REGDISPLAY,        mon.display*2(INT32))
      IMS.332.WriteRegister (IMS.332.REGSHORTDIS,	    mon.shortDisplay*2(INT32))
      IMS.332.WriteRegister (IMS.332.REGVDISPLAY,      mon.vDisplay)
      IMS.332.WriteRegister (IMS.332.REGVBLANK,	    mon.vBlank)
      IMS.332.WriteRegister (IMS.332.REGVSYNC,		    mon.vSync)
      IMS.332.WriteRegister (IMS.332.REGVPREEQUALIZE, mon.vPreEqualize)
      IMS.332.WriteRegister (IMS.332.REGVPOSTEQUALIZE,mon.vPostEqualize)
      IMS.332.WriteRegister (IMS.332.REGBROADPULSE,	mon.broadPulse*2(INT32))
      IMS.332.WriteRegister (IMS.332.REGMEMINIT, 	    mon.memInit*2(INT32))
      IMS.332.WriteRegister (IMS.332.REGXFERDELAY,	    mon.xferDelay*2(INT32))
      IMS.332.WriteRegister (IMS.332.REGLINESTART,	    mon.lineStart*2(INT32))
      IMS.332.WriteRegister (IMS.332.REGCOLORMASK, #FFFFFFFF(INT32))
      CSRA := 0(INT32)
      CSRA := CSRA BITOR IMS.332.CSRA.DISABLECURSOR
      CSRA := CSRA BITOR IMS.335.BPP24
      CSRA := CSRA BITOR IMS.332.CSRA.PIXELINTERLEAVE
      CSRA := CSRA BITOR IMS.332.VRAMINC1024
      CSRA := CSRA BITOR IMS.332.CSRA.PLAINSYNC
      CSRA := CSRA BITOR IMS.332.CSRA.VTGENABLE
      CSRA := CSRA BITOR IMS.332.CSRA.SEPARATESYNC
      CSRA := CSRA BITOR IMS.332.CSRA.VIDEOONLY
      IMS.332.WriteRegister(IMS.332.REGCSRA, CSRA)
  :
  
  [524288]INT32 VRAM :  -- 4*512K=2MB
  VAL VRAMHardware IS #80400000 :
  PLACE VRAM AT ((VRAMHardware >> 2) - (#80000000 >> 2)) /\ #3FFFFFFF :


  PROC pokeWords (VAL INT addr, VAL INT count, VAL INT32 val)
    INT a :
    SEQ
      a := addr
      SEQ c = 0 FOR count
        SEQ
          VRAM[a] := val
          a := a + 1
  :
  
  -- Thanks again, Inmos. Somewhere deep in the data sheet is a one liner about the palette being used for
  -- gamma correction in true colour modes. #FFS
  PROC nilGamma ()
    INT32 gamma :
    SEQ
      SEQ c = IMS.332.REGLUTBASE FOR 256
        SEQ
          gamma := INT32 (c-IMS.332.REGLUTBASE)
          gamma := gamma << 8
          gamma := gamma BITOR (INT32 c)
          gamma := gamma << 8
          gamma := gamma BITOR (INT32 c)
          IMS.332.WriteRegister (c, gamma)
  :

  --some sort of gamma correction
  PROC bt709Gamma ()
    INT32 entry, corrected :
    REAL32 g,i :
    SEQ
      SEQ c = IMS.332.REGLUTBASE FOR 256
        SEQ
          i := REAL32 ROUND (c-IMS.332.REGLUTBASE)
          g := POWER(i/255.0(REAL32), 2.2(REAL32))
          corrected := INT32 ROUND (255.0(REAL32) * g)
          so.write.string (fs,ts, "gamma uncorrected=")
          so.write.real32 (fs,ts, i, 3, 1)
          so.write.string (fs,ts, " corrected=")
          so.write.int32 (fs,ts, corrected, 2)
          so.write.string.nl (fs,ts, "")
          entry := corrected
          entry := entry << 8
          entry := entry BITOR corrected
          entry := entry << 8
          entry := entry BITOR corrected
          IMS.332.WriteRegister (c, entry)
  :
        
  PROC setupGfx()
    SEQ
      resetB438()
      IMS.332.Init()
      --nilGamma()
      bt709Gamma()
      pokeWords(0000, 640*480, #00000000(INT32)) -- black
      pokeWords(640*10, 640*10, #0000FF00(INT32)) -- green
      pokeWords(640*20, 640*10, #000000FF(INT32)) -- blue
  :

  -- display a 2D patch
  PROC displayPatch ( VAL INT x, y, size, [16][16] INT patch )
    VAL y.y IS (y + y) - 256 :
    VAL x.x IS (x + x) - 256 :
    INT ptr :
    SEQ
      ptr := ((511 - y.y) << 9) + x.x

      [512*512] BYTE iscreen RETYPES screenRAM :
      SEQ j = 0 FOR size
        pLine IS patch [j] :
        INT lptr :
        SEQ
          lptr := ptr
          SEQ i = 0 FOR size    -- inner loop in x
            VAL colour IS pLine [i] :
            INT r, g, b :
            INT32 c :
            SEQ
              -- word is xxbbbbbbbbbbggggggggggrrrrrrrrrr
              r := (colour >>  2) /\ #FF -- bottom 8 bits
              g := (colour >> 12) /\ #FF
              b := (colour >> 22) /\ #FF
              c := INT32(((r << 16) BITOR (g << 8)) BITOR b)
              pokeWords(((((256-(y-128))+(size-j))*(640))+(x-128))+i, 1, c)
              iscreen [     lptr] := BYTE r
              iscreen [   lptr+1] := BYTE g
              iscreen [ lptr-512] := BYTE b
              iscreen [ lptr-511] := BYTE 0

              lptr := lptr + 2
          ptr := ptr - 1024
  :


  ---------------------------- COMMANDS PROTOCOL -----------------------------
  
  VAL c.stop    IS 0 :
  VAL c.render  IS 1 :  -- render; x0; y0
  VAL c.object  IS 2 :  -- object; size; [ size ]
  VAL c.light   IS 3 :  -- light;  size; [ size ]
  VAL c.patch   IS 4 :  -- patch;  x; y; patchSize; [ patchSize][patchSize]
  VAL c.runData IS 5 :  -- ambient light, rendering mode, screen pos etc.
  VAL c.message IS 6 :  -- message; size; [ words ]

  ------------------------------------------------------------------------------------------
  -- This procedure has been developed to print the image to file called 'ray.mtv'.
  -- The file is written as Mark VanDeWettering's (mtv) file format.
  -- The image is a 24 bit colour in 256 * 256 resolution.
  ------------------------------------------------------------------------------------------ 
  PROC FileImage (INT32 Status)
    VAL OutFileName IS "ray.mtv" :
    VAL OutFileType IS spt.binary :
    VAL OutFileMode IS spm.output :
    VAL INT WriteBlock IS (INT ((256*256)-1)) : -- same as 2^16 - 1, max. so.write can send

    [512*512] BYTE screen RETYPES screenRAM :
    [WriteBlock+1] BYTE filebuffer :
    INT Rptr, Gptr, Bptr, LRptr, LGptr, LBptr, LenWritten, Fptr :
    INT32 OutFileId :
    BYTE FileResult, WriteStatus, CloseStatus :

    SEQ  
      so.open (fs, ts, OutFileName, OutFileType, OutFileMode, OutFileId, FileResult)
      IF
        (FileResult = spr.operation.failed)
          SEQ
            so.write.string    (fs, ts, " Open failed for  `")
            so.write.string    (fs, ts, OutFileName)
            so.write.string.nl (fs, ts, "`")
        (FileResult = spr.bad.name)
          SEQ
            so.write.string    (fs, ts, " `")
            so.write.string    (fs, ts, OutFileName)
            so.write.string.nl (fs, ts, "`  is an invalid file name")
        (FileResult = spr.bad.type)
          so.write.string.nl (fs, ts, " Invalid file type")
        (FileResult = spr.bad.mode)
          so.write.string.nl (fs, ts, " Invalid file mode")
        (FileResult = spr.bad.packet.size)
          so.write.string.nl (fs, ts, " File name too large")
        TRUE
          SEQ
            so.puts (fs, ts, OutFileId, "256 256", WriteStatus)
            IF
              (WriteStatus = spr.operation.failed)
                SEQ
                  so.write.string    (fs, ts, " The write failed for output file  `")
                  so.write.string    (fs, ts, OutFileName)
                  so.write.string.nl (fs, ts, "`")
              (WriteStatus = spr.bad.packet.size)
                SEQ
                  so.write.string    (fs, ts, " Bad packet size for output file  `")
                  so.write.string    (fs, ts, OutFileName)
                  so.write.string.nl (fs, ts, "`")
              (WriteStatus = spr.ok)
                SEQ
                  so.write.nl        (fs, ts)
                  so.write.string    (fs, ts, " PRODUCING  `")
                  so.write.string    (fs, ts, OutFileName)
                  so.write.string.nl (fs, ts, "`  as the output file...")
                  so.write.nl        (fs, ts)
                  Bptr := 0 + (0 << 9)       -- Blue  screenRAM memory pointer
                  Gptr := 1 + (1 << 9)       -- Green screenRAM memory pointer
                  Rptr := 0 + (1 << 9)       -- Red   screenRAM memory pointer
                  Fptr := 0                  -- file buffer pointer
                  SEQ i = 0 FOR 256
                    SEQ                                        -- convert screenRAM pointers...
                      LBptr, LGptr, LRptr := Bptr, Gptr, Rptr  -- ... to screen memory pointers
                      SEQ j = 0 FOR 256
                        SEQ                
                          IF
                            (Fptr = WriteBlock)        -- when output limit reached..
                              SEQ                      -- write out file block.
                                so.write (fs, ts, OutFileId, [filebuffer FROM 0 FOR WriteBlock], LenWritten)
                                Fptr := 0              -- reset buffer pointer
                            TRUE
                              SKIP                     -- copy screen contents to file buffer
                          [filebuffer FROM Fptr FOR 1]     := [screen FROM LRptr FOR 1]
                          [filebuffer FROM (Fptr+1) FOR 1] := [screen FROM LGptr FOR 1]
                          [filebuffer FROM (Fptr+2) FOR 1] := [screen FROM LBptr FOR 1]
                          Fptr := Fptr + 3             -- increment file buffer pointer
                          LBptr, LGptr, LRptr := LBptr + 2, LGptr + 2, LRptr + 2
                      Bptr, Gptr, Rptr := Bptr + 1024, Gptr + 1024, Rptr + 1024
                  IF
                    (Fptr <> 0)                        -- if buffer not empty... then write out remainder
                      so.write (fs, ts, OutFileId, [filebuffer FROM 0 FOR Fptr], LenWritten)
                    TRUE
                      SKIP
                  so.write.string.nl (fs, ts, " OK, all done!!")
              TRUE
                SKIP
            so.close (fs, ts, OutFileId, CloseStatus)
      
      IF 
        ((FileResult = spr.ok) AND (WriteStatus = spr.ok) AND (CloseStatus = spr.ok))
          Status := sps.success
        TRUE
          Status := sps.failure
  :


  PROC MenuSelection (CHAN OF INT image)
    BYTE InKey, Result :
    BOOL Selected :

    SEQ
      Selected := FALSE
      so.write.string.nl(fs,ts,"                                                           ")
      so.write.string.nl(fs,ts,"               RayTracer Image Selection                   ")
      so.write.string.nl(fs,ts,"               =========================                   ")
      so.write.string.nl(fs,ts,"                                                           ")
      so.write.string.nl(fs,ts,"               <1>  10 Sphere Image                        ")
      so.write.string.nl(fs,ts,"               <2>  14 Sphere Image                        ")
      so.write.string.nl(fs,ts,"               <3>  Cone, Ellipsoid Image                  ")
      so.write.string.nl(fs,ts,"               <4>  Cylinder, Sphere Image                 ")
      so.write.string.nl(fs,ts,"               <5>  (small) Cylinder, Sphere Image         ")
      so.write.string.nl(fs,ts,"                                                           ")
      so.write.string   (fs,ts," Your Selection ")                      

      WHILE NOT (Selected)
        SEQ
          so.getkey(fs,ts,InKey,Result)
          IF
            (Result = spr.ok)
              SEQ
                IF
                  ((InKey >= '1') AND (InKey <= '5'))
                    SEQ
                      image ! (INT InKey) - (INT '0')
                      so.write.int(fs, ts, (INT InKey) - (INT '0'), 1)
                      so.write.nl (fs, ts)
                      Selected := TRUE
                  TRUE
                    SKIP
            TRUE
              SKIP
  :
                        

  ---------------------------- COMMANDS PROTOCOL -----------------------------

  CHAN OF ANY fromRenderer :
  PRI PAR
    WHILE TRUE
      INT command :
      SEQ
        in ? command
        IF
          command = c.patch
            INT x, y, size :
            [16][16] INT patch :
            SEQ
              in ? x; y; size
              SEQ i = 0 FOR size
                in ? [ patch [i] FROM 0 FOR size ]
              fromRenderer ! command; x; y; size
              SEQ i = 0 FOR size
                fromRenderer ! [ patch [i] FROM 0 FOR size ]
          command = c.message
            INT size :
            [256] INT chars :
            SEQ
              in ? size; [ chars FROM 0 FOR size ]
              fromRenderer ! command; size; [ chars FROM 0 FOR size ]
          command = c.stop
            fromRenderer ! command
    SEQ
      ---------------------------- MAX COLOUR ------------------------------
      [512] BYTE line :
      SEQ
        SEQ i = 0 FOR 256
          line [i] := BYTE i
        [ line FROM 256 FOR 256 ] := [ line FROM 0 FOR 256 ]
        SEQ y = 0 FOR 512
          screenRAM [y] := line

      ---------------------------- DO THE ACTION ---------------------------

      TIMER clock :
      INT start, end :

      REAL32 realTime, realTicks :

      VAL uSecsPerTick IS 64 :
      VAL iticks       IS 1000000 / 64 :
      VAL ticks IS REAL32 TRUNC iticks :
      INT command :
      SEQ
        so.write.string.nl (fs, ts, " setupGfx")
        setupGfx()
        MenuSelection(image)
        so.write.string.nl (fs, ts, " The inmos ray tracer is GO")
        clock ? start
        fromRenderer ? command
        WHILE command <> c.stop
          SEQ
            IF
              command = c.patch
                INT x, y, size :
                [16][16] INT patch :
                SEQ
                  fromRenderer ? x; y; size
                  --so.write.string (fs, ts, " p x=")
                  --so.write.int (fs, ts, x, 1)
                  --so.write.string (fs, ts, ",y=")
                  --so.write.int (fs, ts, y, 1)
                  --so.write.string (fs, ts, ",size=")
                  --so.write.int (fs, ts, size, 1)
                  SEQ i = 0 FOR size
                    fromRenderer ? [ patch [i] FROM 0 FOR size ]
                  displayPatch ( x, y, size, patch )
              command = c.message
                INT size :
                [256] INT chars :
                [256] BYTE OutString : 
                SEQ
                  fromRenderer ? size; [ chars FROM 0 FOR size ]
                  SEQ i = 0 FOR size   
                    OutString[i] := BYTE (chars[i] /\ #FF)
                  so.write.string (fs, ts, [OutString FROM 0 FOR size])
              TRUE
                SEQ
                  so.write.string.nl (fs, ts," GARBAGE COMMAND")
                  STOP
            fromRenderer ? command
        clock ? end
        SEQ
          realTicks := REAL32 TRUNC (end MINUS start)
          realTime  := realTicks / ticks
          so.write.nl (fs, ts)
          so.write.string (fs, ts, " DONE, took ")
          so.write.real32 (fs,ts, realTime, 5, 2)
          so.write.string (fs,ts, " seconds on ")
          so.write.int (fs,ts, processors, 2)
          so.write.string.nl (fs, ts, " processors.")
        clock ? start
        clock ? AFTER (start PLUS (20 * iticks))

      INT32 Status :
      SEQ
        FileImage(Status)
        so.exit (fs, ts, Status)      
:

