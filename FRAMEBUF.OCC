#INCLUDE "hostio.inc"
#INCLUDE "streamio.inc"

PROC frameBuffer (CHAN OF SP fs, ts, CHAN OF ANY in, CHAN OF INT image.selection, 
                  VAL INT processors)
  #USE "hostio.lib"
  #USE "streamio.lib"
  #USE "SNGLMATH.LIB"

  #INCLUDE "B438.INC"
  #INCLUDE "PROTOCOL.INC"
    
  -- display a 2D patch
  PROC displayPatch ( VAL INT x, y, size, [16][16] INT patch )
    VAL INT xOffset IS (x-128):
    VAL INT yOffset IS 256-(y-128):
    SEQ
      INT ptr:
      SEQ j = 0 FOR size
        pLine IS patch [j] :
        SEQ
          VAL INT lineOffset IS (yOffset+(size-j))*640:
          ptr := lineOffset + xOffset
          SEQ i = 0 FOR size    -- inner loop in x
            VAL colour IS pLine [i] :
            INT r, g, b :
            INT32 c :
            SEQ
              -- word is xxbbbbbbbbbbggggggggggrrrrrrrrrr
              r := (colour >>  2) /\ #FF -- bottom 8 bits
              g := (colour >> 12) /\ #FF
              b := (colour >> 22) /\ #FF
              c := INT32(((r << 16) BITOR (g << 8)) BITOR b)
              VRAM[ptr] := c
              ptr := ptr + 1
  :

  PROC MenuSelection (CHAN OF INT image)
    BYTE InKey, Result :
    BOOL Selected :

    SEQ
      Selected := FALSE
      so.write.string.nl(fs,ts,"                                                           ")
      so.write.string.nl(fs,ts,"               RayTracer Image Selection                   ")
      so.write.string.nl(fs,ts,"               =========================                   ")
      so.write.string.nl(fs,ts,"                                                           ")
      so.write.string.nl(fs,ts,"               <1>  10 Sphere Image                        ")
      so.write.string.nl(fs,ts,"               <2>  14 Sphere Image                        ")
      so.write.string.nl(fs,ts,"               <3>  Cone, Ellipsoid Image                  ")
      so.write.string.nl(fs,ts,"               <4>  Cylinder, Sphere Image                 ")
      so.write.string.nl(fs,ts,"               <5>  (small) Cylinder, Sphere Image         ")
      so.write.string.nl(fs,ts,"                                                           ")
      so.write.string   (fs,ts," Your Selection ")                      

      WHILE NOT (Selected)
        SEQ
          so.getkey(fs,ts,InKey,Result)
          IF
            (Result = spr.ok)
              SEQ
                IF
                  ((InKey >= '1') AND (InKey <= '5'))
                    SEQ
                      image ! (INT InKey) - (INT '0')
                      so.write.int(fs, ts, (INT InKey) - (INT '0'), 1)
                      so.write.nl (fs, ts)
                      Selected := TRUE
                  TRUE
                    SKIP
            TRUE
              SKIP
  :
                        

  --PROC frameBuffer (CHAN OF SP fs, ts, CHAN OF ANY in, CHAN OF INT image.selection, VAL INT processors)

  ---------------------------- COMMANDS PROTOCOL -----------------------------
  CHAN OF ANY fromRenderer :
  PRI PAR
    WHILE TRUE
      INT command :
      SEQ
        in ? command
        IF
          command = c.patch
            INT x, y, size, worker :
            [16][16] INT patch :
            SEQ
              in ? x; y; size; worker
              SEQ i = 0 FOR size
                in ? [ patch [i] FROM 0 FOR size ]
              fromRenderer ! command; x; y; size; worker
              SEQ i = 0 FOR size
                fromRenderer ! [ patch [i] FROM 0 FOR size ]
          command = c.message
            INT size :
            [256] INT chars :
            SEQ
              in ? size; [ chars FROM 0 FOR size ]
              fromRenderer ! command; size; [ chars FROM 0 FOR size ]
          command = c.message2
            INT size :
            INT a,b:
            [256] INT chars :
            SEQ
              in ? a
              in ? b
              in ? size; [ chars FROM 0 FOR size ]
              fromRenderer ! command; a; b; size; [ chars FROM 0 FOR size ]
          command = c.stop
            fromRenderer ! command
    SEQ
      ---------------------------- DO THE ACTION ---------------------------

      TIMER clock :
      INT start, end :

      REAL32 realTime, realTicks :

      VAL uSecsPerTick IS 64 :
      VAL iticks       IS 1000000 / 64 :
      VAL ticks IS REAL32 TRUNC iticks :
      INT command :
      SEQ
        so.write.string.nl (fs, ts, " setupGfx")
        setupGfx()
        MenuSelection(image.selection)
        so.write.string.nl (fs, ts, " The inmos ray tracer is GO")
        clock ? start
        fromRenderer ? command
        WHILE command <> c.stop
          SEQ
            IF
              command = c.patch
                INT x, y, size, worker :
                [16][16] INT patch :
                SEQ
                  fromRenderer ? x; y; size; worker
                  --so.write.string.nl (fs, ts, "")
                  --so.write.string (fs, ts, " p x=")
                  --so.write.int (fs, ts, x, 1)
                  --so.write.string (fs, ts, ",y=")
                  --so.write.int (fs, ts, y, 1)
                  --so.write.string (fs, ts, ",w=")
                  --so.write.int (fs, ts, worker, 1)
                  SEQ i = 0 FOR size
                    fromRenderer ? [ patch [i] FROM 0 FOR size ]
                  displayPatch ( x, y, size, patch )
              command = c.message
                INT size :
                [256] INT chars :
                [256] BYTE OutString : 
                SEQ
                  fromRenderer ? size; [ chars FROM 0 FOR size ]
                  SEQ i = 0 FOR size   
                    OutString[i] := BYTE (chars[i] /\ #FF)
                  so.write.string (fs, ts, [OutString FROM 0 FOR size])
              command = c.message2
                INT size :
                INT a,b:
                [256] INT chars :
                [256] BYTE OutString : 
                SEQ
                  fromRenderer ? a
                  fromRenderer ? b
                  fromRenderer ? size; [ chars FROM 0 FOR size ]
                  SEQ i = 0 FOR size   
                    OutString[i] := BYTE (chars[i] /\ #FF)
                  so.write.string (fs, ts, [OutString FROM 0 FOR size])
                  so.write.int (fs,ts,a,1)
                  so.write.string (fs, ts, ":")
                  so.write.int (fs,ts,b,1)
              TRUE
                SEQ
                  so.write.string.nl (fs, ts," GARBAGE COMMAND")
                  STOP
            fromRenderer ? command
        clock ? end
        SEQ
          realTicks := REAL32 TRUNC (end MINUS start)
          realTime  := realTicks / ticks
          so.write.nl (fs, ts)
          so.write.string (fs, ts, " DONE, took ")
          so.write.real32 (fs,ts, realTime, 5, 2)
          so.write.string (fs,ts, " seconds on ")
          so.write.int (fs,ts, processors, 2)
          so.write.string.nl (fs, ts, " processors.")
        clock ? start
        clock ? AFTER (start PLUS (20 * iticks))

      INT32 Status :
      SEQ
        so.exit (fs, ts, Status)      
:

