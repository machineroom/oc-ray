
PROC controlSystem ( []CHAN OF ANY toWorkers, []CHAN OF ANY fromWorkers, CHAN OF ANY fb.in, CHAN OF INT image.selection )

  #INCLUDE "PROTOCOL.INC"

  [4]INT free.workers:

  [256] INT message :
  INT mess.p :

  PROC writes ( VAL [] BYTE s, [256] INT buffer )
    SEQ
      SEQ i = 0 FOR SIZE s
        buffer [i] := INT s [i]
      fb.in ! c.message; SIZE s; [ buffer FROM 0 FOR SIZE s ]
  :

  PROC writes2 ( VAL [] BYTE s, VAL INT a,b )
    [256] INT buffer:
    SEQ
      SEQ i = 0 FOR SIZE s
        buffer [i] := INT s [i]
      fb.in ! c.message2; a;b;SIZE s; [ buffer FROM 0 FOR SIZE s ]
  :

  #INCLUDE "WORLD.INC"

  PROC sendPatches ( CHAN OF ANY out, VAL INT patchEdge )
    VAL patchesWide IS 256 / patchEdge :
    --VAL patchesWide IS 60 / patchEdge :
    SEQ
      SEQ x = 0 FOR patchesWide
        SEQ y = 0 FOR patchesWide
          out ! c.render; (x * patchEdge) + 128; (y * patchEdge) + 128
      out ! c.stop
  :

  -- loadBalance ensures that farm isn't overloaded using a count of free workers
  PROC loadBalance ( CHAN OF ANY in, out, return, 
                     [256] INT buffer )
    BOOL passActive, farmActive :
    INT free, command :
    SEQ
      farmActive := TRUE
      passActive := TRUE
      -- calculate total workers
      free := 0
      SEQ w=0 FOR SIZE free.workers
        SEQ
          free := free + free.workers[w]
      writes2 ( "*N*C cntlsys free = ", free, free)
      WHILE passActive OR farmActive
        PRI ALT
          (free > 0) & in ? command
            IF
              command = c.render
                INT x, y :
                SEQ
                  --writes ( "*N*C S c.render to system", buffer)
                  free := free - 1
                  in  ? x; y
                  out ! command; x; y
              command = c.stop
                SEQ
                  writes ( "*N*C R c.stop from pumper", buffer)
                  out ! c.stop
                  passActive := FALSE
          return ? command
            IF
              command = c.patch
                INT x, y, size, worker :
                SEQ
                  --writes ( "*N*C R patch", buffer)
                  return   ? x; y; size; worker
                  fb.in ! command; x; y; size; worker
                  SEQ i = 0 FOR size
                    SEQ
                      return   ? [ buffer FROM 0 FOR size ]
                      fb.in ! [ buffer FROM 0 FOR size ]
                  free := free + 1
              command = c.message
                INT size :
                SEQ
                  return   ? size; [ buffer FROM 0 FOR size ]
                  fb.in ! command; size; [ buffer FROM 0 FOR size ]
              command = c.stop
                SEQ
                  farmActive := FALSE
                  writes ( "*N*C received c.stop", buffer)
      fb.in ! c.stop
  :

  -- send render to available worker
  PROC outputBuffer ( CHAN OF ANY in, []CHAN OF ANY out )
    INT command, max :
    SEQ
      in ? command
      WHILE command <> c.stop
        SEQ
          max := SIZE out
          IF
            command = c.render
              INT x, y, max, target :
              SEQ
                -- find branch with most free workers
                -- (there must be a free worker since the load balancer maintains a global count)
                max := 0
                SEQ w=0 FOR SIZE free.workers
                  IF 
                    free.workers[w] > max
                      SEQ
                        max := free.workers[w]
                        target := w
                    TRUE
                      SKIP
                in ? x; y
                out[target] ! command;x;y
                free.workers[target] := free.workers[target] - 1
          in ? command
      SEQ i=0 FOR SIZE out
        out[i] ! command
  :

  -- receive patches from one of workers
  PROC returnBuffer ( []CHAN OF ANY fromWorkers, CHAN OF ANY out, [256] INT buffer )
    INT command :
    SEQ
      command := c.invalid
      WHILE command <> c.stop
        ALT w=0 FOR SIZE fromWorkers
          fromWorkers[w] ? command
            IF
              command = c.patch
                INT x, y, size, worker :
                SEQ
                  fromWorkers[w]  ? x; y; size; worker
                  out ! command; x; y; size; worker
                  SEQ i = 0 FOR size
                    SEQ
                      fromWorkers[w]  ? [ buffer FROM 0 FOR size ]
                      out ! [ buffer FROM 0 FOR size ]
                  free.workers[w] := free.workers[w] + 1
              command = c.message
                INT size :
                SEQ
                  fromWorkers[w] ? size; [ buffer FROM 0 FOR size ]
                  out ! command; size; [ buffer FROM 0 FOR size ]
  :
  
  -- send map to workers
  PROC sendMap ([]CHAN OF ANY toWorkers)
    SEQ w = 0 FOR SIZE toWorkers
      SEQ
        toWorkers[w] ! c.map
  :

  -- receive mapAck response from all workers
  PROC receiveMapAck ([]CHAN OF ANY fromWorkers)
    INT command:
    [256] INT buffer:
    INT count:
    INT done:
    INT expected:
    BOOL continue:
    SEQ
      done := 0
      expected := SIZE fromWorkers
      continue := TRUE
      WHILE continue
        ALT w=0 FOR SIZE fromWorkers
          fromWorkers[w] ? command
            IF
              command = c.mapAck
                SEQ
                  done := done + 1
                  fromWorkers[w] ? count
                  free.workers[w] := count
                  IF
                    done = expected
                      continue := FALSE
                    TRUE
                      SKIP
      writes2 ( "*N*C receiveMapAck free.workers[0]:[1] = ", free.workers[0], free.workers[1])
  :

  -- fb.in is patches to framebuffer
  --PROC controlSystem ( []CHAN OF ANY toWorkers, []CHAN OF ANY fromWorkers, CHAN OF ANY fb.in, CHAN OF INT image.selection )
  VAL patchEdge IS 3 :
  [3][256] INT buffer :
  CHAN OF ANY render.commands, to.farm, from.farm :
  INT model:
  SEQ
    SEQ i=0 FOR SIZE free.workers
      free.workers[i] := 0
    WHILE TRUE
      SEQ
        image.selection ? model
        -- map the size of the network (how many workers down each link)
        sendMap (toWorkers)
        receiveMapAck (fromWorkers)
        SEQ i=0 FOR SIZE toWorkers
          pumpWorldModels ( toWorkers[i], model, patchEdge, buffer [0] )
        PAR
          sendPatches  ( render.commands, patchEdge )         -- sends c.render,x,y for all patches
          outputBuffer ( to.farm, toWorkers )               -- sends commands to farm
          returnBuffer ( fromWorkers, from.farm, buffer [1] )  -- receives patches from farm
          loadBalance  ( render.commands, to.farm, from.farm, buffer [2] )
:

