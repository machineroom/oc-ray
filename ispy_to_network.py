#!/usr/bin/env python3

# Create an Occam network map from the output of ispy for the WX9020 hardware
import sys
import string
import argparse

parser = argparse.ArgumentParser(
                    prog='ispy_to_network ',
                    description='From ispy output write a network map')

parser.add_argument('--input', default=sys.stdin)
parser.add_argument('--output', default='network.inc')
parser.add_argument('--b438', default=False, action='store_true')
args = parser.parse_args()

#ispy_output = sys.stdin.readlines()
ispy_output = open(args.input).readlines()

processors = 0
for line in ispy_output:
    line = line.strip()
    # strip any headers
    if (line.startswith(tuple(string.digits))):
        processors+=1

with open(args.output, encoding="utf-8", mode="w+") as output:
    output.write (f"-- NETWORK block auto-generated by ispy_to_network.py (args {sys.argv})\n")

    output.write ("-- problem size. `processors` is total number of nodes in the net. `workers` is number of raytracer nodes (processors-1)\n")
    output.write (f"VAL processors IS {processors} :\n")
    output.write ("VAL workers IS (processors-1) :\n")
    output.write ("NODE Root:\n")
    output.write ("[workers]NODE System:\n")

    output.write ("NETWORK\n")
    output.write ("  DO\n")
    if args.b438:
      output.write ("    SET Root (type, memsize := \"T805\", 2*M)\n")
    else:
      output.write ("    SET Root (type, memsize := \"T425\", 1*M)\n")
      
    output.write ("    DO i = 0 FOR workers\n")
    output.write ("      SET System[i] (type, memsize := \"T425\", 16*M)\n")

    # WX9020 with homebrew SC specific stuff
    output.write ("    CONNECT Root[link][0] TO HOST WITH Hostlink\n")
    output.write ("    CONNECT Root[link][1] TO System[0][link][2]\n")
    output.write ("    CONNECT Root[link][2] TO System[1][link][0]\n")

    linked_to = []  # list of processors that have been linked to
    linked_to.append(0)
    linked_to.append(1)
    for line in ispy_output:
        line = line.strip()
        # strip any headers
        if (line.startswith(tuple(string.digits))):
            # Translate from this...
            #1 T425c-25 1.8M 2 [    3:2    4:1    0:1    4:0 ]
            # to this...
            #CONNECT System[0][link][0] TO System[2][link][2]
            #CONNECT System[0][link][1] TO System[3][link][1]
            processor = int(line.split()[0])
            if processor == 0:
              # proc 0 in ispy output is the root node
              continue
            processor = processor - 1
            line = line[line.index('[')+1:line.index(']')]
            links = line.split()
            for index,link in enumerate(links):
                if link == "...":
                    pass
                else:
                    target_processor = int(link.split(":")[0])
                    target_processor = target_processor - 1
                    if target_processor not in linked_to and target_processor > processor:
                        linked_to.append(target_processor)
                        target_link = link.split(":")[1]
                        # skip self links
                        if target_processor != processor:
                            output.write (f"    CONNECT System[{processor}][link][{index}] TO System[{target_processor}][link][{target_link}]\n")
                          
          
    output.write (":\n")
